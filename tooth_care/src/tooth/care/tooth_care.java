/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tooth.care;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.RowFilter;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;



public class tooth_care extends javax.swing.JFrame {
    
    private int idCounter = 0;
    private List<Patient> patientList;
    private List<Newappointment> appointmentList;
    private List<Treatment> treatmentList;
    private tooth_care_controller controller;
    


    /**
     * Creates new form tooth_care
     * @param controller
     */
    public tooth_care(tooth_care_controller controller) {
        this.controller = controller;
        initComponents();
        patientList = new ArrayList<>();
         treatmentList = new ArrayList<>();
        appointmentList = new ArrayList<>();
        controller = new tooth_care_controller(patientList, appointmentList, treatmentList);
        AutoCompleteDecorator.decorate(appointmentIDcombobox);
        AutoCompleteDecorator.decorate(patientidcombobox);
       
        

        logout.setVisible(false);
        dashboard.setVisible(false);
        treatment.setVisible(false);
        patient.setVisible(false);
        newappointment.setVisible(false);
 }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainpanel = new javax.swing.JPanel();
        dashboard = new javax.swing.JButton();
        patient = new javax.swing.JButton();
        newappointment = new javax.swing.JButton();
        treatment = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Admin = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        login = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        Patient = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        patientid = new javax.swing.JTextField();
        patientname = new javax.swing.JTextField();
        age = new javax.swing.JTextField();
        gender = new javax.swing.JComboBox<>();
        address = new javax.swing.JTextField();
        mobilenumber = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        PatientTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        update = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        Treatment = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        treatmenttable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        treatmentid = new javax.swing.JTextField();
        appointmentIDcombobox = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        calculatefee = new javax.swing.JButton();
        invoice = new javax.swing.JButton();
        patientidlabel = new javax.swing.JTextField();
        surgeonname = new javax.swing.JTextField();
        cleaning = new javax.swing.JCheckBox();
        whitening = new javax.swing.JCheckBox();
        filling = new javax.swing.JCheckBox();
        nervefilling = new javax.swing.JCheckBox();
        rootcanaltherapy = new javax.swing.JCheckBox();
        updates = new javax.swing.JButton();
        ADD = new javax.swing.JButton();
        CLEAR = new javax.swing.JButton();
        DELETE = new javax.swing.JButton();
        fee = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        Newappointment = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Newappointmenttable = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        Date Date = new Date();
        SpinnerDateModel sm =
        new SpinnerDateModel(Date, null, null, Calendar.HOUR_OF_DAY);
        timeSpinner = new javax.swing.JSpinner(sm);
        appointmentid = new javax.swing.JTextField();
        surgeoncombobox = new javax.swing.JComboBox<>();
        patientidcombobox = new javax.swing.JComboBox<>();
        Add = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        appointmentfee = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        INVOICE = new javax.swing.JPanel();
        Invoice = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        appointmentidlabel = new javax.swing.JLabel();
        Patientidlabel = new javax.swing.JLabel();
        surgeonlabel = new javax.swing.JLabel();
        treatmentfeelabel = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        treatmentidlabel = new javax.swing.JLabel();
        print = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainpanel.setBackground(new java.awt.Color(0, 102, 102));

        dashboard.setBackground(new java.awt.Color(0, 102, 102));
        dashboard.setForeground(new java.awt.Color(255, 255, 255));
        dashboard.setText("DASHBOARD");
        dashboard.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dashboardActionPerformed(evt);
            }
        });

        patient.setBackground(new java.awt.Color(0, 102, 102));
        patient.setForeground(new java.awt.Color(255, 255, 255));
        patient.setText("PATIENTS");
        patient.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        patient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientActionPerformed(evt);
            }
        });

        newappointment.setBackground(new java.awt.Color(0, 102, 102));
        newappointment.setForeground(new java.awt.Color(255, 255, 255));
        newappointment.setText("NEW APPOINTMENT");
        newappointment.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        newappointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newappointmentActionPerformed(evt);
            }
        });

        treatment.setBackground(new java.awt.Color(0, 102, 102));
        treatment.setForeground(new java.awt.Color(255, 255, 255));
        treatment.setText("TREATMENT");
        treatment.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        treatment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treatmentActionPerformed(evt);
            }
        });

        logout.setBackground(new java.awt.Color(0, 102, 102));
        logout.setForeground(new java.awt.Color(255, 255, 255));
        logout.setText("LOG OUT");
        logout.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainpanelLayout = new javax.swing.GroupLayout(mainpanel);
        mainpanel.setLayout(mainpanelLayout);
        mainpanelLayout.setHorizontalGroup(
            mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                    .addComponent(treatment, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                    .addComponent(newappointment, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                    .addComponent(patient, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                    .addComponent(dashboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50))
        );
        mainpanelLayout.setVerticalGroup(
            mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(dashboard, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(patient, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(newappointment, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(treatment, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addGap(245, 245, 245))
        );

        getContentPane().add(mainpanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 250, 647));

        Admin.setBackground(new java.awt.Color(255, 255, 255));

        jLabel32.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel32.setText("TOOTH CARE");

        jLabel33.setText("NUGEGODA");

        jLabel35.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tooth/care/Assets/IC.png"))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(0, 102, 102));

        login.setBackground(new java.awt.Color(0, 102, 102));
        login.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        login.setForeground(new java.awt.Color(255, 255, 255));
        login.setText("LOGIN");
        login.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        jLabel36.setBackground(new java.awt.Color(255, 255, 255));
        jLabel36.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        jLabel36.setText("Username");

        username.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        username.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel34.setBackground(new java.awt.Color(0, 102, 102));
        jLabel34.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        jLabel34.setText("Password");

        password.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        password.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        password.setMinimumSize(new java.awt.Dimension(64, 25));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(161, Short.MAX_VALUE)
                .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(206, 206, 206))
        );

        javax.swing.GroupLayout AdminLayout = new javax.swing.GroupLayout(Admin);
        Admin.setLayout(AdminLayout);
        AdminLayout.setHorizontalGroup(
            AdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminLayout.createSequentialGroup()
                .addGroup(AdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AdminLayout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AdminLayout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AdminLayout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 111, Short.MAX_VALUE))
        );
        AdminLayout.setVerticalGroup(
            AdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminLayout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel33)
                .addGap(301, 301, 301))
            .addGroup(AdminLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab1", Admin);

        Patient.setForeground(new java.awt.Color(0, 102, 102));

        jLabel2.setText("Patient ID          ");

        jLabel3.setText("Patient Name ");

        jLabel4.setText("Mobile Number  ");

        jLabel5.setText("Age               ");

        jLabel6.setText("Address              ");

        jLabel7.setText("Gender          ");

        patientid.setEditable(false);

        gender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));
        gender.setMinimumSize(new java.awt.Dimension(72, 30));

        PatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ID", "Patient Name", "Age", "Gender", "Address", "Mobile Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PatientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PatientTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(PatientTable);

        jLabel8.setBackground(new java.awt.Color(0, 102, 102));
        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("PATIENT REGISTRATION");

        add.setBackground(new java.awt.Color(0, 102, 102));
        add.setForeground(new java.awt.Color(255, 255, 255));
        add.setText("ADD");
        add.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        update.setBackground(new java.awt.Color(0, 102, 102));
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setText("UPDATE");
        update.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        clear.setBackground(new java.awt.Color(0, 102, 102));
        clear.setForeground(new java.awt.Color(255, 255, 255));
        clear.setText("CLEAR");
        clear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(0, 102, 102));
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("DELETE");
        delete.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PatientLayout = new javax.swing.GroupLayout(Patient);
        Patient.setLayout(PatientLayout);
        PatientLayout.setHorizontalGroup(
            PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PatientLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 822, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PatientLayout.createSequentialGroup()
                        .addGroup(PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(PatientLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(patientname, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PatientLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(patientid, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PatientLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PatientLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(gender, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PatientLayout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mobilenumber, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PatientLayout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(35, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PatientLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(263, 263, 263))
            .addGroup(PatientLayout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PatientLayout.setVerticalGroup(
            PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PatientLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientid, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gender, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(patientname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mobilenumber, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addGroup(PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );

        jTabbedPane1.addTab("tab2", Patient);

        Treatment.setBackground(new java.awt.Color(255, 255, 255));

        treatmenttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Treatment ID", "Appointment ID", "Patient ID", "Surgoen", "Treatments"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        treatmenttable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treatmenttableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(treatmenttable);

        jLabel1.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        jLabel1.setText("Appointment ID");

        jLabel16.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        jLabel16.setText("Treatment ID ");

        treatmentid.setEditable(false);
        treatmentid.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N

        appointmentIDcombobox.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        appointmentIDcombobox.setMinimumSize(new java.awt.Dimension(72, 26));
        appointmentIDcombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentIDcomboboxActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        jLabel15.setText("Patient ID ");

        jLabel17.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        jLabel17.setText("Surgeon ");

        jLabel20.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        jLabel20.setText("Treatment ");

        jLabel21.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        jLabel21.setText("Total Fee");

        calculatefee.setBackground(new java.awt.Color(0, 102, 102));
        calculatefee.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        calculatefee.setForeground(new java.awt.Color(255, 255, 255));
        calculatefee.setText("CALCULATE FEE");
        calculatefee.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        calculatefee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculatefeeActionPerformed(evt);
            }
        });

        invoice.setBackground(new java.awt.Color(0, 102, 102));
        invoice.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        invoice.setForeground(new java.awt.Color(255, 255, 255));
        invoice.setText("INVOICE");
        invoice.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        invoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceActionPerformed(evt);
            }
        });

        patientidlabel.setEditable(false);
        patientidlabel.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N

        surgeonname.setEditable(false);
        surgeonname.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N

        cleaning.setBackground(new java.awt.Color(255, 255, 255));
        cleaning.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        cleaning.setText("Cleaning");

        whitening.setBackground(new java.awt.Color(255, 255, 255));
        whitening.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        whitening.setText("Whitening");
        whitening.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteningActionPerformed(evt);
            }
        });

        filling.setBackground(new java.awt.Color(255, 255, 255));
        filling.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        filling.setText("Filling");

        nervefilling.setBackground(new java.awt.Color(255, 255, 255));
        nervefilling.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        nervefilling.setText("Nerve Filling");

        rootcanaltherapy.setBackground(new java.awt.Color(255, 255, 255));
        rootcanaltherapy.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        rootcanaltherapy.setText("Root Canal Theraoy");

        updates.setBackground(new java.awt.Color(0, 102, 102));
        updates.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        updates.setForeground(new java.awt.Color(255, 255, 255));
        updates.setText("UPDATE");
        updates.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatesActionPerformed(evt);
            }
        });

        ADD.setBackground(new java.awt.Color(0, 102, 102));
        ADD.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        ADD.setForeground(new java.awt.Color(255, 255, 255));
        ADD.setText("ADD");
        ADD.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDActionPerformed(evt);
            }
        });

        CLEAR.setBackground(new java.awt.Color(0, 102, 102));
        CLEAR.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        CLEAR.setForeground(new java.awt.Color(255, 255, 255));
        CLEAR.setText("CLEAR");
        CLEAR.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CLEAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLEARActionPerformed(evt);
            }
        });

        DELETE.setBackground(new java.awt.Color(0, 102, 102));
        DELETE.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        DELETE.setForeground(new java.awt.Color(255, 255, 255));
        DELETE.setText("DELETE");
        DELETE.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        DELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETEActionPerformed(evt);
            }
        });

        fee.setEditable(false);
        fee.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("TREATMENT DETAILS");

        javax.swing.GroupLayout TreatmentLayout = new javax.swing.GroupLayout(Treatment);
        Treatment.setLayout(TreatmentLayout);
        TreatmentLayout.setHorizontalGroup(
            TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TreatmentLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TreatmentLayout.createSequentialGroup()
                        .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TreatmentLayout.createSequentialGroup()
                                .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(TreatmentLayout.createSequentialGroup()
                                        .addComponent(ADD, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31))
                                    .addGroup(TreatmentLayout.createSequentialGroup()
                                        .addComponent(fee)
                                        .addGap(41, 41, 41)))
                                .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(TreatmentLayout.createSequentialGroup()
                                        .addComponent(updates, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(CLEAR, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31)
                                        .addComponent(DELETE, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(invoice, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(calculatefee, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(appointmentIDcombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(TreatmentLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 823, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(TreatmentLayout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(treatmentid, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TreatmentLayout.createSequentialGroup()
                                .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(TreatmentLayout.createSequentialGroup()
                                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(surgeonname, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(TreatmentLayout.createSequentialGroup()
                                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(patientidlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(49, 49, 49)
                                .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(TreatmentLayout.createSequentialGroup()
                                        .addGap(80, 80, 80)
                                        .addComponent(rootcanaltherapy))
                                    .addGroup(TreatmentLayout.createSequentialGroup()
                                        .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(TreatmentLayout.createSequentialGroup()
                                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(cleaning, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(TreatmentLayout.createSequentialGroup()
                                                .addGap(80, 80, 80)
                                                .addComponent(whitening, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(filling, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(nervefilling)))))
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        TreatmentLayout.setVerticalGroup(
            TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TreatmentLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TreatmentLayout.createSequentialGroup()
                        .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cleaning)
                            .addComponent(filling)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(whitening)
                            .addComponent(nervefilling))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rootcanaltherapy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TreatmentLayout.createSequentialGroup()
                        .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(patientidlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(treatmentid, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                                .addComponent(appointmentIDcombobox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(surgeonname)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TreatmentLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(calculatefee, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TreatmentLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fee, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)))
                .addGroup(TreatmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ADD, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updates, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CLEAR, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DELETE, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoice, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
        );

        jTabbedPane1.addTab("tab4", Treatment);

        Newappointment.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        jLabel9.setText("Appointment ID    ");

        Newappointmenttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AppointmentID", "PatientID", "Surgeon", "AppointmentFee", "Date", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Newappointmenttable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NewappointmenttableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Newappointmenttable);

        jLabel10.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        jLabel10.setText("Patient ID             ");

        jLabel11.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        jLabel11.setText("Surgeon                 ");

        jLabel12.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        jLabel12.setText("Appointment fee   ");

        jLabel13.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        jLabel13.setText("Date       ");
        jLabel13.setPreferredSize(new java.awt.Dimension(48, 24));

        jLabel14.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        jLabel14.setText("Time       ");

        JSpinner.DateEditor de = new JSpinner.DateEditor(timeSpinner, "HH:mm");
        timeSpinner.setEditor(de);
        timeSpinner.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N

        appointmentid.setEditable(false);
        appointmentid.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N

        surgeoncombobox.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        surgeoncombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vijay", "Vikram" }));

        patientidcombobox.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        patientidcombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientidcomboboxActionPerformed(evt);
            }
        });

        Add.setBackground(new java.awt.Color(0, 102, 102));
        Add.setForeground(new java.awt.Color(255, 255, 255));
        Add.setText("ADD");
        Add.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Update.setBackground(new java.awt.Color(0, 102, 102));
        Update.setForeground(new java.awt.Color(255, 255, 255));
        Update.setText("UPADTE");
        Update.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Delete.setBackground(new java.awt.Color(0, 102, 102));
        Delete.setForeground(new java.awt.Color(255, 255, 255));
        Delete.setText("DELETE");
        Delete.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Clear.setBackground(new java.awt.Color(0, 102, 102));
        Clear.setForeground(new java.awt.Color(255, 255, 255));
        Clear.setText("CLEAR");
        Clear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        jDateChooser1.setDateFormatString("yyyy-MM-dd");

        appointmentfee.setEditable(false);
        appointmentfee.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        appointmentfee.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                appointmentfeeComponentShown(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("APPOINTMENT DETAILS");

        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });

        jLabel37.setBackground(new java.awt.Color(255, 255, 255));
        jLabel37.setFont(new java.awt.Font("Segoe UI Emoji", 0, 18)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(51, 51, 51));
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel37.setText("Search Appointment");

        javax.swing.GroupLayout NewappointmentLayout = new javax.swing.GroupLayout(Newappointment);
        Newappointment.setLayout(NewappointmentLayout);
        NewappointmentLayout.setHorizontalGroup(
            NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewappointmentLayout.createSequentialGroup()
                .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NewappointmentLayout.createSequentialGroup()
                        .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(NewappointmentLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(appointmentid, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patientidcombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42)
                                .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12))
                                .addGap(28, 28, 28)
                                .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(NewappointmentLayout.createSequentialGroup()
                                        .addComponent(surgeoncombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(44, 44, 44))
                                    .addGroup(NewappointmentLayout.createSequentialGroup()
                                        .addComponent(appointmentfee)
                                        .addGap(48, 48, 48)))
                                .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, NewappointmentLayout.createSequentialGroup()
                                .addGap(173, 173, 173)
                                .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(NewappointmentLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 824, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(NewappointmentLayout.createSequentialGroup()
                        .addGap(277, 277, 277)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(NewappointmentLayout.createSequentialGroup()
                        .addGap(275, 275, 275)
                        .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(search)
                            .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        NewappointmentLayout.setVerticalGroup(
            NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewappointmentLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(NewappointmentLayout.createSequentialGroup()
                        .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(appointmentid, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientidcombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(NewappointmentLayout.createSequentialGroup()
                        .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(surgeoncombobox)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(appointmentfee, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(NewappointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab3", Newappointment);

        Invoice.setBackground(new java.awt.Color(255, 255, 255));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel19.setText("TOOTH CARE");

        jLabel22.setText("NUGEGODA");

        jLabel23.setText("Appointment ID");

        jLabel24.setText("Treatment ID");

        jLabel25.setText("Patient ID");

        jLabel29.setText("Surgeon");

        jLabel31.setText("_________________________________________________________________");

        jLabel38.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tooth/care/Assets/st.png"))); // NOI18N

        jLabel39.setFont(new java.awt.Font("Amazone BT", 0, 18)); // NOI18N
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel39.setText("We're All About Giving You a Smile ");

        jLabel40.setFont(new java.awt.Font("Amazone BT", 0, 18)); // NOI18N
        jLabel40.setText("That'll Shine");

        jLabel41.setText("_________________________________________________________________");

        jLabel28.setText("Total Fee");

        javax.swing.GroupLayout InvoiceLayout = new javax.swing.GroupLayout(Invoice);
        Invoice.setLayout(InvoiceLayout);
        InvoiceLayout.setHorizontalGroup(
            InvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(InvoiceLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InvoiceLayout.createSequentialGroup()
                    .addGap(28, 28, 28)
                    .addGroup(InvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(InvoiceLayout.createSequentialGroup()
                            .addGap(4, 4, 4)
                            .addGroup(InvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(49, 49, 49)
                            .addGroup(InvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(appointmentidlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Patientidlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(surgeonlabel, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                .addComponent(treatmentidlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(InvoiceLayout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(57, 57, 57)
                            .addComponent(treatmentfeelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap()))
            .addGroup(InvoiceLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(InvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)))
            .addGroup(InvoiceLayout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InvoiceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        InvoiceLayout.setVerticalGroup(
            InvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InvoiceLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(InvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(InvoiceLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel22))
                    .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(59, 59, 59)
                .addGroup(InvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InvoiceLayout.createSequentialGroup()
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(InvoiceLayout.createSequentialGroup()
                        .addComponent(treatmentidlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(appointmentidlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Patientidlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(surgeonlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(70, 70, 70)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(treatmentfeelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel41)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel40)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        print.setBackground(new java.awt.Color(0, 102, 102));
        print.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        print.setForeground(new java.awt.Color(255, 255, 255));
        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout INVOICELayout = new javax.swing.GroupLayout(INVOICE);
        INVOICE.setLayout(INVOICELayout);
        INVOICELayout.setHorizontalGroup(
            INVOICELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, INVOICELayout.createSequentialGroup()
                .addContainerGap(506, Short.MAX_VALUE)
                .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(231, 231, 231))
            .addGroup(INVOICELayout.createSequentialGroup()
                .addGap(193, 193, 193)
                .addComponent(Invoice, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        INVOICELayout.setVerticalGroup(
            INVOICELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(INVOICELayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(Invoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab5", INVOICE);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, -40, 880, 700));

        setSize(new java.awt.Dimension(1128, 625));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
    String patientID = patientid.getText();
    String patientName = patientname.getText();
    String Age = age.getText();
    String Gender = gender.getSelectedItem().toString();
    String Address = address.getText();
    String MobileNumber = mobilenumber.getText();
    
    
    patientidcombobox.addItem(patientID);

    if (isPatientDuplicate(patientID)) {
        JOptionPane.showMessageDialog(this,
                "Patient with the same ID already exists.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (patientID.isEmpty() || patientName.isEmpty() || Age.isEmpty() || Gender.isEmpty() || Address.isEmpty() || MobileNumber.isEmpty()) {
        JOptionPane.showMessageDialog(this,
                "Please Enter All Fields",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        int ageValue = Integer.parseInt(Age);
        int mobileNumberValue = Integer.parseInt(MobileNumber);

        if (ageValue <= 0) {
            JOptionPane.showMessageDialog(this,
                    "Please enter a valid age greater than 0",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Call the controller method to handle patient details input
        controller.handlePatientDetailsInput(patientID, patientName, Age, Gender, Address, MobileNumber);

        DefaultTableModel model = (DefaultTableModel) PatientTable.getModel();
        model.addRow(new Object[]{patientID, patientName, Age, Gender, Address, MobileNumber});

        patientid.setText("");
        patientname.setText("");
        age.setText("");
        gender.setSelectedIndex(0);
        address.setText("");
        mobilenumber.setText("");

        JOptionPane.showMessageDialog(this,
                "Add Successfully",
                "Added",
                JOptionPane.INFORMATION_MESSAGE);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this,
                "Please enter valid  values for age and mobile number",
                "Error",
                JOptionPane.ERROR_MESSAGE);
    }
            Random rand = new Random();
        int randomId = rand.nextInt(90000) + 10000;
        patientid.setText(String.valueOf("ID" + randomId));
    }//GEN-LAST:event_addActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
    
        add.setEnabled(true);
// Get the values from the UI components
    String patientID = patientid.getText();
    String patientName = patientname.getText();
    String ageStr = age.getText();
    String Gender = gender.getSelectedItem().toString();
    String Address = address.getText();
    String mobileNumberStr = mobilenumber.getText();

    // Validate that all fields are filled
    if (patientID.isEmpty() || patientName.isEmpty() || ageStr.isEmpty() || Gender.isEmpty() || Address.isEmpty() || mobileNumberStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please Enter All Fields", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Parse age and mobileNumber as integers
        int age = Integer.parseInt(ageStr);
        int mobileNumber = Integer.parseInt(mobileNumberStr);

        // Call the controller method to handle the update
        controller.handleUpdatePatient(patientID, patientName, age, Gender, Address, mobileNumber);

        // Get the selected row index
        int rowIndex = PatientTable.getSelectedRow();

        // Check if a row is selected
        if (rowIndex != -1) {
            // Update the values in the table model
            DefaultTableModel model = (DefaultTableModel) PatientTable.getModel();
            model.setValueAt(patientID, rowIndex, 0);
            model.setValueAt(patientName, rowIndex, 1);
            model.setValueAt(age, rowIndex, 2);
            model.setValueAt(Gender, rowIndex, 3);
            model.setValueAt(Address, rowIndex, 4);
            model.setValueAt(mobileNumber, rowIndex, 5);

            // Clear the input fields
            clearInputFields();

            JOptionPane.showMessageDialog(this, "Update Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter valid numeric values for age and mobile number", "Error", JOptionPane.ERROR_MESSAGE);
    }
            Random rand = new Random();
        int randomId = rand.nextInt(90000) + 10000;
        patientid.setText(String.valueOf("ID" + randomId));
}

// Helper method to clear input fields
private void clearInputFields() {
    patientid.setText("");
    patientname.setText("");
    age.setText("");
    gender.setSelectedIndex(0);
    address.setText("");
    mobilenumber.setText("");
    }//GEN-LAST:event_updateActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        add.setEnabled(true);
        
        
        clearInputFields();
                Random rand = new Random();
        int randomId = rand.nextInt(90000) + 10000;
        patientid.setText(String.valueOf("ID" + randomId));
    }//GEN-LAST:event_clearActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
    int selectedRow = PatientTable.getSelectedRow();

    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this,
                "Please select the patient to delete",
                "Error",
                JOptionPane.ERROR_MESSAGE);
    } else {
        DefaultTableModel model = (DefaultTableModel) PatientTable.getModel();

        // Get patient ID from the selected row
        String patientID = model.getValueAt(selectedRow, 0).toString();

        // Call the controller method to handle patient deletion
        controller.deletePatient(patientID);

        // Remove the row from the table
        model.removeRow(selectedRow);

        // Clear input fields or perform any other actions
        clearInputFields();

        JOptionPane.showMessageDialog(this,
                "Patient details deleted successfully",
                "Delete",
                JOptionPane.INFORMATION_MESSAGE);
    }
        add.setEnabled(true);
                Random rand = new Random();
        int randomId = rand.nextInt(90000) + 10000;
        patientid.setText(String.valueOf("ID" + randomId));
    }//GEN-LAST:event_deleteActionPerformed

    private void PatientTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PatientTableMouseClicked
       add.setEnabled(false);
// TODO add your handling code here:
        DefaultTableModel Model = (DefaultTableModel) PatientTable.getModel();
        int MyIndex = PatientTable.getSelectedRow();
        patientid.setText(Model.getValueAt(MyIndex, 0).toString());
        patientname.setText(Model.getValueAt(MyIndex, 1).toString());
        age.setText(Model.getValueAt(MyIndex, 2).toString());
        gender.setSelectedItem(Model.getValueAt(MyIndex, 3).toString());
        address.setText(Model.getValueAt(MyIndex, 4).toString());
        mobilenumber.setText(Model.getValueAt(MyIndex, 5).toString());
    }//GEN-LAST:event_PatientTableMouseClicked

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // TODO add your handling code here:
        
        String appointmentID = appointmentid.getText();
        String patientID = patientidcombobox.getSelectedItem().toString();
        Object selectedPatientIDObject = patientidcombobox.getSelectedItem();

// Check if the selected item is not null
        if (selectedPatientIDObject != null) {
    // Convert the selected item to a string
         String selectedPatientID = selectedPatientIDObject.toString();

    // Now you can use the selectedPatientID in your code
    // ...
        } else {
    // Handle the case where the selected item is null
        JOptionPane.showMessageDialog(null, "Please select a patient ID.");
         return;
}
        String surgeon = surgeoncombobox.getSelectedItem().toString();
        String appointmentfeeValue = appointmentfee.getText();

        appointmentIDcombobox.addItem(appointmentID);
        
        DefaultTableModel model = (DefaultTableModel) Newappointmenttable.getModel();
        if (appointmentID.isEmpty() || patientID.isEmpty() || patientidcombobox.getSelectedItem()== null || surgeon.isEmpty() || appointmentfeeValue.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill in all fields.");
            return;
        }

        for (int row = 0; row < model.getRowCount(); row++) {
            if (appointmentID.equals(model.getValueAt(row, 0).toString())) {
                JOptionPane.showMessageDialog(null, "Appointment ID must be unique. Please choose a different ID.");
                return;
            }
        }
        


        // Get date from JDateChooser
        Date selectedDate = jDateChooser1.getDate();
        if (selectedDate == null) {
            JOptionPane.showMessageDialog(null, "Please select a valid date.");
            return;
        }

        // Check if the selected date is before today's date
        if (selectedDate.before(new Date())) {
            JOptionPane.showMessageDialog(null, "Appointment date must be on or after today's date.");
            return;
        }

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String dateString = dateFormat.format(selectedDate);

        // Get time from JSpinner
        Object timeValue = timeSpinner.getValue();
        if (!(timeValue instanceof Date)) {
            JOptionPane.showMessageDialog(null, "Please select a valid time.");
            return;
        }

        Date selectedTime = (Date) timeValue;

        // Check if the selected time is within the allowed range
// Check if the selected date is on Monday, Wednesday, Saturday, or Sunday
Calendar cal = Calendar.getInstance();
cal.setTime(selectedDate);
int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);

if (!(dayOfWeek == Calendar.MONDAY || dayOfWeek == Calendar.WEDNESDAY ||
      dayOfWeek == Calendar.SATURDAY || dayOfWeek == Calendar.SUNDAY)) {
    // Selected date is not allowed, show an error message
    JOptionPane.showMessageDialog(this,
            "You can only book appointments on Monday, Wednesday, Saturday, or Sunday.",
            "Error",
            JOptionPane.ERROR_MESSAGE);
    return; // Exit the method if the date is not valid
}

// Check if the selected time is within the allowed range
cal.setTime(selectedTime);

int hourOfDay = cal.get(Calendar.HOUR_OF_DAY);
int minutes = cal.get(Calendar.MINUTE);

if ((dayOfWeek == Calendar.MONDAY || dayOfWeek == Calendar.WEDNESDAY) && (hourOfDay < 18 || hourOfDay > 21 || (hourOfDay == 21 && minutes > 0))) {
    // Monday and Wednesday: 18:00 to 21:00
    // Time is not within the allowed range, show an error message
    JOptionPane.showMessageDialog(this,
            "Appointment time must be between 18:00 and 21:00",
            "Error",
            JOptionPane.ERROR_MESSAGE);
    return; // Exit the method if the time is not valid
} else if ((dayOfWeek == Calendar.SATURDAY || dayOfWeek == Calendar.SUNDAY) && (hourOfDay < 15 || hourOfDay > 22 || (hourOfDay == 22 && minutes > 0))) {
    // Saturday and Sunday: 15:00 to 22:00
    // Time is not within the allowed range, show an error message
    JOptionPane.showMessageDialog(this,
            "Appointment time must be between 15:00 and 22:00",
            "Error",
            JOptionPane.ERROR_MESSAGE);
    return; // Exit the method if the time is not valid // Exit the method if the time is not valid
}


        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
        String timeString = timeFormat.format(selectedTime);
       
            boolean addedSuccessfully = controller.addNewAppointment(appointmentID, patientID, surgeon, appointmentfeeValue, dateString, timeString);

    if (addedSuccessfully) {
        // Update the UI or perform any additional actions
        // Clear text fields and reset combo boxes for the next entry if needed
        appointmentid.setText("");
        // Clear other fields as needed...
    }        
                     
        int result = JOptionPane.showConfirmDialog(
                null,
                "Accept appointment fee: " + appointmentfeeValue + "?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION
        );

        if (result == JOptionPane.YES_OPTION) {
            Object[] newRow = {appointmentID, patientID, surgeon, appointmentfeeValue, dateString, timeString};
            model.addRow(newRow);

            // Clear text fields and reset combo boxes for the next entry if needed
            appointmentid.setText("");
            // Clear other fields as needed...
        }
                Random rand = new Random();
        int randomId = rand.nextInt(90000) + 10000;
        appointmentid.setText(String.valueOf("ID" + randomId));

            patientidcombobox.setSelectedIndex(0);
   
    }//GEN-LAST:event_AddActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        // TODO add your handling code here:
        appointmentid.setText("");
        patientidcombobox.setSelectedIndex(0);
        surgeoncombobox.setSelectedIndex(0);
        appointmentfee.setText("LKR 1000");
        jDateChooser1.setDate(null);
        timeSpinner.setValue(new Date());
        
                        Random rand = new Random();
        int randomId = rand.nextInt(90000) + 10000;
        appointmentid.setText(String.valueOf("ID" + randomId));
        Add.setEnabled(true);
    }//GEN-LAST:event_ClearActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
    int selectedRow = Newappointmenttable.getSelectedRow();

    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this,
                "Please select the appointment to delete",
                "Error",
                JOptionPane.ERROR_MESSAGE);
    } else {
        DefaultTableModel model = (DefaultTableModel) Newappointmenttable.getModel();

        // Get appointment ID from the selected row
        String appointmentID = model.getValueAt(selectedRow, 0).toString();

        // Call the controller method to handle appointment deletion
        controller.deleteAppointment(appointmentID);

        // Remove the row from the table
        model.removeRow(selectedRow);

        // Clear fields or perform any other actions
        clearFields();

        JOptionPane.showMessageDialog(this,
                "Appointment details deleted successfully",
                "Delete",
                JOptionPane.INFORMATION_MESSAGE);
    }
            Add.setEnabled(true);
                            Random rand = new Random();
        int randomId = rand.nextInt(90000) + 10000;
        appointmentid.setText(String.valueOf("ID" + randomId));
    }//GEN-LAST:event_DeleteActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        Add.setEnabled(true);
// TODO add your handling code here:
try {
    DefaultTableModel model = (DefaultTableModel) Newappointmenttable.getModel();

    // Get the selected row (you need to implement this part based on your UI)
    int selectedRow = Newappointmenttable.getSelectedRow();

    // Check if a row is selected
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select an appointment to update.");
        return;
    }

    // Extract existing data from the selected row
    String existingAppointmentID = model.getValueAt(selectedRow, 0).toString();
    String existingpatientID = model.getValueAt(selectedRow, 1).toString();
    // Get the updated data
    String updatedAppointmentID = appointmentid.getText();
    String updatedPatientID = patientidcombobox.getSelectedItem().toString();
        Object selectedPatientIDObject = patientidcombobox.getSelectedItem();

// Check if the selected item is not null
if (selectedPatientIDObject != null) {
    // Convert the selected item to a string
    String selectedPatientID = selectedPatientIDObject.toString();

    // Now you can use the selectedPatientID in your code
    // ...
} else {
    // Handle the case where the selected item is null
    JOptionPane.showMessageDialog(null, "Please select a patient ID.");
    return;
}
    
    String updatedSurgeon = surgeoncombobox.getSelectedItem().toString();
    String updatedAppointmentFee = appointmentfee.getText();

    // Check if any fields are empty
    if (updatedAppointmentID.isEmpty() || updatedPatientID.isEmpty() || patientidcombobox.getSelectedItem()== null || updatedSurgeon.isEmpty() || updatedAppointmentFee.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please fill in all fields.");
        return;
    }

    // Check if the updated appointment ID is unique
    if (!existingAppointmentID.equals(updatedAppointmentID)) {
        for (int row = 0; row < model.getRowCount(); row++) {
            if (updatedAppointmentID.equals(model.getValueAt(row, 0).toString())) {
                JOptionPane.showMessageDialog(null, "Updated appointment ID must be unique. Please choose a different ID.");
                return;
            }
        }
    }
    


    // Get the updated date from JDateChooser
    Date updatedDate = jDateChooser1.getDate();
    if (updatedDate == null) {
        JOptionPane.showMessageDialog(null, "Please select a valid date.");
        return;
    }
    
        // Check if the selected date is before the current date
    if (updatedDate.before(new Date())) {
        JOptionPane.showMessageDialog(null, "Updated appointment date must be on or after today's date.");
        return;
    }

    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    String updatedDateString = dateFormat.format(updatedDate);

    // Get the updated time from JSpinner
    Object updatedTimeValue = timeSpinner.getValue();
    if (!(updatedTimeValue instanceof Date)) {
        JOptionPane.showMessageDialog(null, "Please select a valid time.");
        return;
    }

    Date updatedTime = (Date) updatedTimeValue;
    SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
    String updatedTimeString = timeFormat.format(updatedTime);

    // Check if the updated time is within the allowed range (18:00 to 21:00)
// Check if the selected date is on Monday, Wednesday, Saturday, or Sunday
Calendar cal = Calendar.getInstance();
cal.setTime(updatedDate);
int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);

if (!(dayOfWeek == Calendar.MONDAY || dayOfWeek == Calendar.WEDNESDAY ||
      dayOfWeek == Calendar.SATURDAY || dayOfWeek == Calendar.SUNDAY)) {
    // Selected date is not allowed, show an error message
    JOptionPane.showMessageDialog(this,
            "You can only book appointments on Monday, Wednesday, Saturday, or Sunday.",
            "Error",
            JOptionPane.ERROR_MESSAGE);
    return; // Exit the method if the date is not valid
}

// Check if the selected time is within the allowed range
cal.setTime(updatedTime);
int hourOfDay = cal.get(Calendar.HOUR_OF_DAY);
int minutes = cal.get(Calendar.MINUTE);

if ((dayOfWeek == Calendar.MONDAY || dayOfWeek == Calendar.WEDNESDAY) && (hourOfDay < 18 || hourOfDay > 21 || (hourOfDay == 21 && minutes > 0))) {
    // Monday and Wednesday: 18:00 to 21:00
    // Time is not within the allowed range, show an error message
    JOptionPane.showMessageDialog(this,
            "Appointment time must be between 18:00 and 21:00",
            "Error",
            JOptionPane.ERROR_MESSAGE);
    return; // Exit the method if the time is not valid
} else if ((dayOfWeek == Calendar.SATURDAY || dayOfWeek == Calendar.SUNDAY) && (hourOfDay < 15 || hourOfDay > 22 || (hourOfDay == 22 && minutes > 0))) {
    // Saturday and Sunday: 15:00 to 22:00
    // Time is not within the allowed range, show an error message
    JOptionPane.showMessageDialog(this,
            "Appointment time must be between 15:00 and 22:00",
            "Error",
            JOptionPane.ERROR_MESSAGE);
    return; // Exit the method if the time is not valid // Exit the method if the time is not valid
}

boolean updatedSuccessfully = controller.updateAppointment(
        existingAppointmentID,
        updatedPatientID,
        updatedSurgeon,
        updatedAppointmentFee,
        updatedDateString,
        updatedTimeString
);

        if (updatedSuccessfully) {
            // Update the UI or perform any additional actions
            // Clear text fields and reset combo boxes for the next update if needed
            appointmentfee.setText("LKR 1000");
            // Clear other fields as needed...
        }
        

    // Proceed with the update
    int result = JOptionPane.showConfirmDialog(
            null,
            "Accept updated appointment details?",
            "Confirmation",
            JOptionPane.YES_NO_OPTION
    );

    if (result == JOptionPane.YES_OPTION) {
        // Update the row in the table
        model.setValueAt(updatedAppointmentID, selectedRow, 0);
        model.setValueAt(updatedPatientID, selectedRow, 1);
        model.setValueAt(updatedSurgeon, selectedRow, 2);
        model.setValueAt(updatedAppointmentFee, selectedRow, 3);
        model.setValueAt(updatedDateString, selectedRow, 4);
        model.setValueAt(updatedTimeString, selectedRow, 5);

    }
    
    patientidcombobox.setSelectedIndex(0);

} catch (Exception ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(null, "Select the PatientID , Appointment Date and Time");
}
clearFields();

                Random rand = new Random();
        int randomId = rand.nextInt(90000) + 10000;
        appointmentid.setText(String.valueOf("ID" + randomId));


    }//GEN-LAST:event_UpdateActionPerformed

    private void NewappointmenttableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NewappointmenttableMouseClicked
        Add.setEnabled(false);
// TODO add your handling code here:
        DefaultTableModel Model = (DefaultTableModel) Newappointmenttable.getModel();
             int MyIndex = Newappointmenttable.getSelectedRow();
            appointmentid.setText(Model.getValueAt(MyIndex, 0).toString());
            patientidcombobox.setSelectedItem(Model.getValueAt(MyIndex, 1).toString());
            surgeoncombobox.setSelectedItem(Model.getValueAt(MyIndex, 2).toString());
            appointmentfee.setText(Model.getValueAt(MyIndex, 3).toString());
            // Convert date string to Date object
            try {
                 String dateString = Model.getValueAt(MyIndex, 4).toString();
                 Date dateValue = new SimpleDateFormat("yyyy-MM-dd").parse(dateString);
                jDateChooser1.setDate(dateValue);
                } catch (ParseException e) {
                 e.printStackTrace(); // Handle the parsing exception appropriately
}

// Convert time string to Date object
                try {
                      String timeString = Model.getValueAt(MyIndex, 5).toString();
                      Date timeValue = new SimpleDateFormat("HH:mm").parse(timeString);
                      timeSpinner.setValue(timeValue);
                    } catch (ParseException e) {
                       e.printStackTrace(); // Handle the parsing exception appropriately
}
    }//GEN-LAST:event_NewappointmenttableMouseClicked

    private void appointmentfeeComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_appointmentfeeComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_appointmentfeeComponentShown

    private void invoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceActionPerformed
        jTabbedPane1.setSelectedIndex(4);
        
            DefaultTableModel Model = (DefaultTableModel) treatmenttable.getModel();
            int MyIndex = treatmenttable.getSelectedRow();
            treatmentidlabel.setText(Model.getValueAt(MyIndex, 0).toString());
            appointmentidlabel.setText(Model.getValueAt(MyIndex, 1).toString());
            Patientidlabel.setText(Model.getValueAt(MyIndex, 2).toString());
            surgeonlabel.setText(Model.getValueAt(MyIndex, 3).toString());


    }//GEN-LAST:event_invoiceActionPerformed

    private void calculatefeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculatefeeActionPerformed
        // TODO add your handling code here:
    int totalFee = 1000;

    if (cleaning.isSelected()) {
        totalFee += 4500;
    }

    if (whitening.isSelected()) {
        totalFee += 35000;
    }

    if (filling.isSelected()) {
        totalFee += 4000;
    }

    if (nervefilling.isSelected()) {
        totalFee += 25000;
    }

    if (rootcanaltherapy.isSelected()) {
        totalFee += 25000;
    }

        treatmentfeelabel.setText("LKR " + totalFee);
        fee.setText("LKR " + totalFee);
        
    }//GEN-LAST:event_calculatefeeActionPerformed

    private void whiteningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteningActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_whiteningActionPerformed

    private void patientidcomboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientidcomboboxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_patientidcomboboxActionPerformed

    private void appointmentIDcomboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentIDcomboboxActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        String selectedAppointmentID = appointmentIDcombobox.getSelectedItem().toString();

        // Assuming you have an instance of AppointmentController named "controller"
        String patientID = controller.getPatientIDFromAppointment(selectedAppointmentID);
        String surgeonName = controller.getSurgeonFromAppointment(selectedAppointmentID);

        // Now you can use patientID and surgeonName as needed in your UI
        // For example, update corresponding JTextFields
        patientidlabel.setText(patientID);
        surgeonname.setText(surgeonName);
    }//GEN-LAST:event_appointmentIDcomboboxActionPerformed

    private void treatmenttableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treatmenttableMouseClicked
                DefaultTableModel Model = (DefaultTableModel) treatmenttable.getModel();
             int MyIndex = treatmenttable.getSelectedRow();
            treatmentid.setText(Model.getValueAt(MyIndex, 0).toString());
            appointmentIDcombobox.setSelectedItem(Model.getValueAt(MyIndex, 1).toString());
            patientidlabel.setText(Model.getValueAt(MyIndex, 2).toString());
            surgeonname.setText(Model.getValueAt(MyIndex, 3).toString());
            
    }//GEN-LAST:event_treatmenttableMouseClicked

    private void updatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatesActionPerformed
        ADD.setEnabled(false);
        
    int selectedRowIndex = treatmenttable.getSelectedRow();

    // Check if a row is selected
    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(null, "Please select a treatment to update.");
        return;
    }

    // Get the selected TreatmentID from the selected row
    String selectedTreatmentID = treatmenttable.getValueAt(selectedRowIndex, 0).toString();

    // Get other details from the UI components
    String updatedTreatmentID = treatmentid.getText();
    Object selectedAppointmentIDObject = appointmentIDcombobox.getSelectedItem();

    // Check if an Appointment ID is selected
    if (selectedAppointmentIDObject == null) {
        JOptionPane.showMessageDialog(null, "Please select an Appointment ID.");
        return;
    }

    // Convert the selected item to a string (Appointment ID)
    String selectedAppointmentID = selectedAppointmentIDObject.toString();

    String updatedPatientID = patientidlabel.getText();
    String updatedSurgeonName = surgeonname.getText();
    boolean updatedCleaning = cleaning.isSelected();
    boolean updatedFilling = filling.isSelected();
    boolean updatedWhitening = whitening.isSelected();
    boolean updatedNerveFilling = nervefilling.isSelected();
    boolean updatedRootCanalTherapy = rootcanaltherapy.isSelected();

    // Check if essential fields are empty
    if (updatedTreatmentID.isEmpty() || updatedPatientID.isEmpty() || updatedSurgeonName.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please fill in all required fields.");
        return;
    }

    // Check if the updated TreatmentID is unique
    if (!selectedTreatmentID.equals(updatedTreatmentID) && controller.isTreatmentIDDuplicate(updatedTreatmentID)) {
        JOptionPane.showMessageDialog(null, "Treatment ID must be unique. Please choose a different ID.");
        return;
    }

    // Update treatment details in the table
    DefaultTableModel model = (DefaultTableModel) treatmenttable.getModel();
    model.setValueAt(updatedTreatmentID, selectedRowIndex, 0);
    model.setValueAt(selectedAppointmentID, selectedRowIndex, 1);
    model.setValueAt(updatedPatientID, selectedRowIndex, 2);
    model.setValueAt(updatedSurgeonName, selectedRowIndex, 3);
    model.setValueAt(getTreatmentDetails(updatedCleaning, updatedFilling, updatedWhitening, updatedNerveFilling, updatedRootCanalTherapy), selectedRowIndex, 4);

    // Notify the controller to update the treatment details
    boolean updatedSuccessfully = controller.updateTreatment(selectedTreatmentID, updatedTreatmentID, selectedAppointmentID, updatedPatientID, updatedSurgeonName, updatedCleaning, updatedFilling, updatedWhitening, updatedNerveFilling, updatedRootCanalTherapy);

    if (!updatedSuccessfully) {
        JOptionPane.showMessageDialog(null, "Error updating treatment. Please check your input.");
        return;
    }

    // Update the treatment list
    Treatment updatedTreatment = new Treatment(updatedTreatmentID, selectedAppointmentID, updatedPatientID, updatedSurgeonName, updatedCleaning, updatedFilling, updatedWhitening, updatedNerveFilling, updatedRootCanalTherapy);
    controller.updateTreatmentInList(selectedTreatmentID, updatedTreatment);
    
    clearfields();
    }//GEN-LAST:event_updatesActionPerformed

    private void ADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDActionPerformed
        // TODO add your handling code here:
               
                Object selectedAppointmentIDObject = appointmentIDcombobox.getSelectedItem();
        if (selectedAppointmentIDObject == null) {
            JOptionPane.showMessageDialog(null, "Please select an Appointment ID.");
            return;
        }

        // Convert the selected item to a string (Appointment ID)
        String selectedAppointmentID = selectedAppointmentIDObject.toString();

        // Get other details from the UI components
        String TreatmentID = treatmentid.getText();
        String PatientID = patientidlabel.getText();
        String SurgeonName = surgeonname.getText();
        boolean Cleaning = cleaning.isSelected();
        boolean Filling = filling.isSelected();
        boolean Whitening = whitening.isSelected();
        boolean NerveFilling = nervefilling.isSelected();
        boolean RootCanalTherapy = rootcanaltherapy.isSelected();
        

        // Check if essential fields are empty
        if (TreatmentID.isEmpty() || PatientID.isEmpty() || SurgeonName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill in all required fields.");
            return;
        }

        // Check if the TreatmentID is unique
        if (controller.isTreatmentIDDuplicate(TreatmentID)) {
            JOptionPane.showMessageDialog(null, "Treatment ID must be unique. Please choose a different ID.");
            return;
        }

        // Add treatment details to the table
        DefaultTableModel model = (DefaultTableModel) treatmenttable.getModel();
        model.addRow(new Object[]{TreatmentID, selectedAppointmentID, PatientID, SurgeonName, getTreatmentDetails(Cleaning, Filling, Whitening, NerveFilling, RootCanalTherapy)});

        // Clear input fields
        treatmentid.setText("");
        appointmentIDcombobox.setSelectedIndex(0);
        cleaning.setSelected(false);
        filling.setSelected(false);
        whitening.setSelected(false);
        nervefilling.setSelected(false);
        rootcanaltherapy.setSelected(false);
        patientidlabel.setText("");
        surgeonname.setText("");

        // Notify the controller to add the treatment details
        boolean addedSuccessfully = controller.addNewTreatment(TreatmentID, selectedAppointmentID, PatientID, SurgeonName, Cleaning, Filling, Whitening, NerveFilling, RootCanalTherapy);

        if (!addedSuccessfully) {
            JOptionPane.showMessageDialog(null, "Error adding treatment. Please check your input.");
        }
        }

    private String getTreatmentDetails(boolean cleaning, boolean filling, boolean whitening, boolean nerveFilling, boolean rootCanalTherapy) {
            StringBuilder details = new StringBuilder();

            if (cleaning) {
                details.append("Cleaning, ");
            }

            if (filling) {
                details.append("Filling, ");
            }

            if (whitening) {
                details.append("Whitening, ");
            }

            if (nerveFilling) {
                details.append("Nerve Filling, ");
            }

            if (rootCanalTherapy) {
                details.append("Root Canal Therapy, ");
            }

            // Remove the trailing comma and space if there are treatments
            if (details.length() > 0) {
                details.setLength(details.length() - 2);
            }

            return details.toString();
    }//GEN-LAST:event_ADDActionPerformed

    private void CLEARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLEARActionPerformed
        // TODO add your handling code here:
        ADD.setEnabled(true);
        
           clearfields();

    }//GEN-LAST:event_CLEARActionPerformed

    private void DELETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETEActionPerformed
        // TODO add your handling code here:
        ADD.setEnabled(true);
        
    int selectedRowIndex = treatmenttable.getSelectedRow();

    // Check if a row is selected
    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(null, "Please select a treatment to delete.");
        return;
    }

    // Get the selected TreatmentID from the selected row
    String selectedTreatmentID = treatmenttable.getValueAt(selectedRowIndex, 0).toString();

    // Delete treatment from the table
    DefaultTableModel model = (DefaultTableModel) treatmenttable.getModel();
    model.removeRow(selectedRowIndex);

    // Notify the controller to delete the treatment
    boolean deletedSuccessfully = controller.deleteTreatment(selectedTreatmentID);

    if (!deletedSuccessfully) {
        JOptionPane.showMessageDialog(null, "Error deleting treatment. Please try again.");
        return;
    }


    
    clearfields();

    }//GEN-LAST:event_DELETEActionPerformed

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        // TODO add your handling code here:
         JOptionPane.showMessageDialog(this,
                    "Please Connect The Printer",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_printActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(0);
        logout.setVisible(false);
        dashboard.setVisible(false);
        treatment.setVisible(false);
        patient.setVisible(false);
        newappointment.setVisible(false);
    }//GEN-LAST:event_logoutActionPerformed

    private void treatmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treatmentActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(2);
        Random rand = new Random();
        int randomId = rand.nextInt(90000) + 10000;
        treatmentid.setText(String.valueOf("ID" + randomId));
    }//GEN-LAST:event_treatmentActionPerformed

    private void newappointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newappointmentActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(3);
        Random rand = new Random();
        int randomId = rand.nextInt(90000) + 10000;
        appointmentid.setText(String.valueOf("ID" + randomId));
        appointmentfee.setText("LKR 1000");
        appointmentfee.setEditable(false);

    }//GEN-LAST:event_newappointmentActionPerformed

    private void patientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
        Random rand = new Random();
        int randomId = rand.nextInt(90000) + 10000;
        patientid.setText(String.valueOf("ID" + randomId));
    }//GEN-LAST:event_patientActionPerformed

    private void dashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboardActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_dashboardActionPerformed

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        // TODO add your handling code here:
                        // When the login button is clicked, perform login logic
                String Username = username.getText();
                char[] passwordChars = password.getPassword();
                String Password = new String(passwordChars); // Convert password char array to string

                // Perform your login authentication logic here
                if (controller.authenticateUser(Username, Password)) {
                    // Login successful, you can open a new frame or perform other actions
                            jTabbedPane1.setSelectedIndex(3);
                            logout.setVisible(true);
                            dashboard.setVisible(true);
                            treatment.setVisible(true);
                            patient.setVisible(true);
                            newappointment.setVisible(true);
                } else {
                    // Login failed, show an error message
                    JOptionPane.showMessageDialog(this, "Invalid username or password", "Login Error", JOptionPane.ERROR_MESSAGE);
                }

                // Clear the password field for security reasons
                password.setText("");
       
    }//GEN-LAST:event_loginActionPerformed

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        // TODO add your handling code here:
        DefaultTableModel obj = (DefaultTableModel) Newappointmenttable.getModel();
        TableRowSorter <DefaultTableModel> obj1 = new TableRowSorter<>(obj);
        Newappointmenttable.setRowSorter(obj1);
        obj1.setRowFilter(RowFilter.regexFilter(search.getText()));
     
    }//GEN-LAST:event_searchKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Create a controller (if needed)
    List<Patient> patientList = new ArrayList<>();
    List<Newappointment> appointmentList = new ArrayList<>();
     List<Treatment> treatmentList = new ArrayList<>();
        tooth_care_controller controller = new tooth_care_controller(patientList, appointmentList, treatmentList);
        // Create an instance of tooth_care, passing the controller
        tooth_care frame = new tooth_care(controller);

        // Make the frame visible
        frame.setVisible(true);
            }
        
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADD;
    private javax.swing.JButton Add;
    private javax.swing.JPanel Admin;
    private javax.swing.JButton CLEAR;
    private javax.swing.JButton Clear;
    private javax.swing.JButton DELETE;
    private javax.swing.JButton Delete;
    private javax.swing.JPanel INVOICE;
    private javax.swing.JPanel Invoice;
    private javax.swing.JPanel Newappointment;
    private javax.swing.JTable Newappointmenttable;
    private javax.swing.JPanel Patient;
    private javax.swing.JTable PatientTable;
    private javax.swing.JLabel Patientidlabel;
    private javax.swing.JPanel Treatment;
    private javax.swing.JButton Update;
    private javax.swing.JButton add;
    private javax.swing.JTextField address;
    private javax.swing.JTextField age;
    private javax.swing.JComboBox<String> appointmentIDcombobox;
    private javax.swing.JTextField appointmentfee;
    private javax.swing.JTextField appointmentid;
    private javax.swing.JLabel appointmentidlabel;
    private javax.swing.JButton calculatefee;
    private javax.swing.JCheckBox cleaning;
    private javax.swing.JButton clear;
    private javax.swing.JButton dashboard;
    private javax.swing.JButton delete;
    private javax.swing.JTextField fee;
    private javax.swing.JCheckBox filling;
    private javax.swing.JComboBox<String> gender;
    private javax.swing.JButton invoice;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton login;
    private javax.swing.JButton logout;
    private javax.swing.JPanel mainpanel;
    private javax.swing.JTextField mobilenumber;
    private javax.swing.JCheckBox nervefilling;
    private javax.swing.JButton newappointment;
    private javax.swing.JPasswordField password;
    private javax.swing.JButton patient;
    private javax.swing.JTextField patientid;
    private javax.swing.JComboBox<String> patientidcombobox;
    private javax.swing.JTextField patientidlabel;
    private javax.swing.JTextField patientname;
    private javax.swing.JButton print;
    private javax.swing.JCheckBox rootcanaltherapy;
    private javax.swing.JTextField search;
    private javax.swing.JComboBox<String> surgeoncombobox;
    private javax.swing.JLabel surgeonlabel;
    private javax.swing.JTextField surgeonname;
    private javax.swing.JSpinner timeSpinner;
    private javax.swing.JButton treatment;
    private javax.swing.JLabel treatmentfeelabel;
    private javax.swing.JTextField treatmentid;
    private javax.swing.JLabel treatmentidlabel;
    private javax.swing.JTable treatmenttable;
    private javax.swing.JButton update;
    private javax.swing.JButton updates;
    private javax.swing.JTextField username;
    private javax.swing.JCheckBox whitening;
    // End of variables declaration//GEN-END:variables



    private boolean isPatientDuplicate(String patientID) {
    // Check if the patient with the given ID already exists in the patientList
    return patientList.stream()
            .anyMatch(patient -> patient.getPatientID().equals(patientID));
    }

    private void clearFields() {
        appointmentid.setText("");
        patientidcombobox.setSelectedIndex(0);
        surgeoncombobox.setSelectedIndex(0);
        appointmentfee.setText("LKR 1000");
        jDateChooser1.setDate(null);
        timeSpinner.setValue(new Date());
    }

    private void updateAppointmentTable() {
    DefaultTableModel model = (DefaultTableModel) Newappointmenttable.getModel();
    model.setRowCount(0); // Clear existing data in the table

    for (Newappointment appointment : appointmentList) {
        Object[] rowData = {
            appointment.getAppointmentID(),
            appointment.getPatientID(),
            appointment.getSurgeon(),
            appointment.getAppointmentfee(),
            appointment.getDate(),
            appointment.getTime()
        };
        model.addRow(rowData);
    }
    }

    private void clearfields() {
    treatmentid.setText("");
    appointmentIDcombobox.setSelectedIndex(0);
    cleaning.setSelected(false);
    filling.setSelected(false);
    whitening.setSelected(false);
    nervefilling.setSelected(false);
    rootcanaltherapy.setSelected(false);
    patientidlabel.setText("");
    surgeonname.setText("");
    fee.setText("");

    }






 






 
}